---
# Create groups
- name: Create group {{ item.name }}
  ansible.builtin.group:
    name: "{{ item.value.name }}"
    state: "{{ item.value.state | default('present') }}"
  loop: "{{ lookup('dict', groups_list, wantlist=True) }}"
  when: groups_list | length > 0

# Ensure groups exist before creating users
- name: Ensure groups exist
  ansible.builtin.assert:
    that:
      - "'{{ item.value.groups }}' in groups_list | map(attribute='name') | list"
    fail_msg: "Group '{{ item.value.groups }}' does not exist. Please create the group first."
  loop: "{{ users_list }}"
  when: users_list | length > 0

# Create users
- name: Create User {{ item.key }}
  user:
    name: "{{ item.value.key }}"
    password: "{{ item.value.password }}"
    groups: "{{ item.value.groups}}"
    shell: "{{ item.value.shell }}"
    system: no
    createhome: "{{ item.value.createhome | default('true') }}"
    comment: "{{ item.value.comment }}"
    home: "{{ item.value.home | default('/home/{{ item.key }}') }}"
    force: yes
    remove: yes
    state: "{{ item.value.state | default('present') }}"
  loop: "{{ lookup('dict', users_list, wantlist=True) }}"
  when: users_list | length > 0 and item.value.inventory.split(',') | map('trim') | intersect(group_names) | length > 0

# Set authorized key for console access to users
- name: Set authorized key for console access to {{ item.key }}
  ansible.posix.authorized_key:
    user: "{{ item.value.user }}"
    comment: "{{ item.value.comment }}"
    key: "{{ lookup('file', '{{ item.value.ssh_key_file }}') }}"
    key_options: "{{ item.value.ssh_key_options }}"
    path: "/home/{{ item.value.user }}/.ssh/authorized_keys"
    state: "{{ item.value.state | default('present') }}"
  loop: "{{ lookup('dict', users_list, wantlist=True) }}"
  when: users_list | length > 0
